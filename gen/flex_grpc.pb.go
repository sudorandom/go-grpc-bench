// Protobuf that flexes a lot of the types

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: flex.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlexService_NormalRPC_FullMethodName             = "/flex.FlexService/NormalRPC"
	FlexService_ClientStream_FullMethodName          = "/flex.FlexService/ClientStream"
	FlexService_ServerStream_FullMethodName          = "/flex.FlexService/ServerStream"
	FlexService_BiDirectorionalStream_FullMethodName = "/flex.FlexService/BiDirectorionalStream"
	FlexService_EmptyRPC_FullMethodName              = "/flex.FlexService/EmptyRPC"
)

// FlexServiceClient is the client API for FlexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlexServiceClient interface {
	// Normal RPC method
	NormalRPC(ctx context.Context, in *FlexRequest, opts ...grpc.CallOption) (*FlexReply, error)
	// Stream from client to server
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (FlexService_ClientStreamClient, error)
	// Stream from server to client
	ServerStream(ctx context.Context, in *FlexRequest, opts ...grpc.CallOption) (FlexService_ServerStreamClient, error)
	// Stream both ways
	BiDirectorionalStream(ctx context.Context, in *FlexRequest, opts ...grpc.CallOption) (FlexService_BiDirectorionalStreamClient, error)
	// Don't send or receive anything
	EmptyRPC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type flexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlexServiceClient(cc grpc.ClientConnInterface) FlexServiceClient {
	return &flexServiceClient{cc}
}

func (c *flexServiceClient) NormalRPC(ctx context.Context, in *FlexRequest, opts ...grpc.CallOption) (*FlexReply, error) {
	out := new(FlexReply)
	err := c.cc.Invoke(ctx, FlexService_NormalRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (FlexService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlexService_ServiceDesc.Streams[0], FlexService_ClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &flexServiceClientStreamClient{stream}
	return x, nil
}

type FlexService_ClientStreamClient interface {
	Send(*FlexRequest) error
	CloseAndRecv() (*FlexReply, error)
	grpc.ClientStream
}

type flexServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *flexServiceClientStreamClient) Send(m *FlexRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flexServiceClientStreamClient) CloseAndRecv() (*FlexReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FlexReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flexServiceClient) ServerStream(ctx context.Context, in *FlexRequest, opts ...grpc.CallOption) (FlexService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlexService_ServiceDesc.Streams[1], FlexService_ServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &flexServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlexService_ServerStreamClient interface {
	Recv() (*FlexReply, error)
	grpc.ClientStream
}

type flexServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *flexServiceServerStreamClient) Recv() (*FlexReply, error) {
	m := new(FlexReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flexServiceClient) BiDirectorionalStream(ctx context.Context, in *FlexRequest, opts ...grpc.CallOption) (FlexService_BiDirectorionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlexService_ServiceDesc.Streams[2], FlexService_BiDirectorionalStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &flexServiceBiDirectorionalStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlexService_BiDirectorionalStreamClient interface {
	Recv() (*FlexReply, error)
	grpc.ClientStream
}

type flexServiceBiDirectorionalStreamClient struct {
	grpc.ClientStream
}

func (x *flexServiceBiDirectorionalStreamClient) Recv() (*FlexReply, error) {
	m := new(FlexReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flexServiceClient) EmptyRPC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FlexService_EmptyRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlexServiceServer is the server API for FlexService service.
// All implementations must embed UnimplementedFlexServiceServer
// for forward compatibility
type FlexServiceServer interface {
	// Normal RPC method
	NormalRPC(context.Context, *FlexRequest) (*FlexReply, error)
	// Stream from client to server
	ClientStream(FlexService_ClientStreamServer) error
	// Stream from server to client
	ServerStream(*FlexRequest, FlexService_ServerStreamServer) error
	// Stream both ways
	BiDirectorionalStream(*FlexRequest, FlexService_BiDirectorionalStreamServer) error
	// Don't send or receive anything
	EmptyRPC(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedFlexServiceServer()
}

// UnimplementedFlexServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlexServiceServer struct {
}

func (UnimplementedFlexServiceServer) NormalRPC(context.Context, *FlexRequest) (*FlexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NormalRPC not implemented")
}
func (UnimplementedFlexServiceServer) ClientStream(FlexService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedFlexServiceServer) ServerStream(*FlexRequest, FlexService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedFlexServiceServer) BiDirectorionalStream(*FlexRequest, FlexService_BiDirectorionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDirectorionalStream not implemented")
}
func (UnimplementedFlexServiceServer) EmptyRPC(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyRPC not implemented")
}
func (UnimplementedFlexServiceServer) mustEmbedUnimplementedFlexServiceServer() {}

// UnsafeFlexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlexServiceServer will
// result in compilation errors.
type UnsafeFlexServiceServer interface {
	mustEmbedUnimplementedFlexServiceServer()
}

func RegisterFlexServiceServer(s grpc.ServiceRegistrar, srv FlexServiceServer) {
	s.RegisterService(&FlexService_ServiceDesc, srv)
}

func _FlexService_NormalRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).NormalRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlexService_NormalRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).NormalRPC(ctx, req.(*FlexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlexServiceServer).ClientStream(&flexServiceClientStreamServer{stream})
}

type FlexService_ClientStreamServer interface {
	SendAndClose(*FlexReply) error
	Recv() (*FlexRequest, error)
	grpc.ServerStream
}

type flexServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *flexServiceClientStreamServer) SendAndClose(m *FlexReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flexServiceClientStreamServer) Recv() (*FlexRequest, error) {
	m := new(FlexRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FlexService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlexRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlexServiceServer).ServerStream(m, &flexServiceServerStreamServer{stream})
}

type FlexService_ServerStreamServer interface {
	Send(*FlexReply) error
	grpc.ServerStream
}

type flexServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *flexServiceServerStreamServer) Send(m *FlexReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FlexService_BiDirectorionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlexRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlexServiceServer).BiDirectorionalStream(m, &flexServiceBiDirectorionalStreamServer{stream})
}

type FlexService_BiDirectorionalStreamServer interface {
	Send(*FlexReply) error
	grpc.ServerStream
}

type flexServiceBiDirectorionalStreamServer struct {
	grpc.ServerStream
}

func (x *flexServiceBiDirectorionalStreamServer) Send(m *FlexReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FlexService_EmptyRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).EmptyRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlexService_EmptyRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).EmptyRPC(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FlexService_ServiceDesc is the grpc.ServiceDesc for FlexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flex.FlexService",
	HandlerType: (*FlexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NormalRPC",
			Handler:    _FlexService_NormalRPC_Handler,
		},
		{
			MethodName: "EmptyRPC",
			Handler:    _FlexService_EmptyRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _FlexService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _FlexService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BiDirectorionalStream",
			Handler:       _FlexService_BiDirectorionalStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flex.proto",
}
