// Protobuf that flexes a lot of the types

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flex.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/sudorandom/go-grpc-bench/gen"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FlexServiceName is the fully-qualified name of the FlexService service.
	FlexServiceName = "flex.FlexService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FlexServiceNormalRPCProcedure is the fully-qualified name of the FlexService's NormalRPC RPC.
	FlexServiceNormalRPCProcedure = "/flex.FlexService/NormalRPC"
	// FlexServiceClientStreamProcedure is the fully-qualified name of the FlexService's ClientStream
	// RPC.
	FlexServiceClientStreamProcedure = "/flex.FlexService/ClientStream"
	// FlexServiceServerStreamProcedure is the fully-qualified name of the FlexService's ServerStream
	// RPC.
	FlexServiceServerStreamProcedure = "/flex.FlexService/ServerStream"
	// FlexServiceBiDirectorionalStreamProcedure is the fully-qualified name of the FlexService's
	// BiDirectorionalStream RPC.
	FlexServiceBiDirectorionalStreamProcedure = "/flex.FlexService/BiDirectorionalStream"
	// FlexServiceEmptyRPCProcedure is the fully-qualified name of the FlexService's EmptyRPC RPC.
	FlexServiceEmptyRPCProcedure = "/flex.FlexService/EmptyRPC"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	flexServiceServiceDescriptor                     = gen.File_flex_proto.Services().ByName("FlexService")
	flexServiceNormalRPCMethodDescriptor             = flexServiceServiceDescriptor.Methods().ByName("NormalRPC")
	flexServiceClientStreamMethodDescriptor          = flexServiceServiceDescriptor.Methods().ByName("ClientStream")
	flexServiceServerStreamMethodDescriptor          = flexServiceServiceDescriptor.Methods().ByName("ServerStream")
	flexServiceBiDirectorionalStreamMethodDescriptor = flexServiceServiceDescriptor.Methods().ByName("BiDirectorionalStream")
	flexServiceEmptyRPCMethodDescriptor              = flexServiceServiceDescriptor.Methods().ByName("EmptyRPC")
)

// FlexServiceClient is a client for the flex.FlexService service.
type FlexServiceClient interface {
	// Normal RPC method
	NormalRPC(context.Context, *connect.Request[gen.FlexRequest]) (*connect.Response[gen.FlexReply], error)
	// Stream from client to server
	ClientStream(context.Context) *connect.ClientStreamForClient[gen.FlexRequest, gen.FlexReply]
	// Stream from server to client
	ServerStream(context.Context, *connect.Request[gen.FlexRequest]) (*connect.ServerStreamForClient[gen.FlexReply], error)
	// Stream both ways
	BiDirectorionalStream(context.Context, *connect.Request[gen.FlexRequest]) (*connect.ServerStreamForClient[gen.FlexReply], error)
	// Don't send or receive anything
	EmptyRPC(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewFlexServiceClient constructs a client for the flex.FlexService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFlexServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FlexServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &flexServiceClient{
		normalRPC: connect.NewClient[gen.FlexRequest, gen.FlexReply](
			httpClient,
			baseURL+FlexServiceNormalRPCProcedure,
			connect.WithSchema(flexServiceNormalRPCMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		clientStream: connect.NewClient[gen.FlexRequest, gen.FlexReply](
			httpClient,
			baseURL+FlexServiceClientStreamProcedure,
			connect.WithSchema(flexServiceClientStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		serverStream: connect.NewClient[gen.FlexRequest, gen.FlexReply](
			httpClient,
			baseURL+FlexServiceServerStreamProcedure,
			connect.WithSchema(flexServiceServerStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		biDirectorionalStream: connect.NewClient[gen.FlexRequest, gen.FlexReply](
			httpClient,
			baseURL+FlexServiceBiDirectorionalStreamProcedure,
			connect.WithSchema(flexServiceBiDirectorionalStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		emptyRPC: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+FlexServiceEmptyRPCProcedure,
			connect.WithSchema(flexServiceEmptyRPCMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// flexServiceClient implements FlexServiceClient.
type flexServiceClient struct {
	normalRPC             *connect.Client[gen.FlexRequest, gen.FlexReply]
	clientStream          *connect.Client[gen.FlexRequest, gen.FlexReply]
	serverStream          *connect.Client[gen.FlexRequest, gen.FlexReply]
	biDirectorionalStream *connect.Client[gen.FlexRequest, gen.FlexReply]
	emptyRPC              *connect.Client[emptypb.Empty, emptypb.Empty]
}

// NormalRPC calls flex.FlexService.NormalRPC.
func (c *flexServiceClient) NormalRPC(ctx context.Context, req *connect.Request[gen.FlexRequest]) (*connect.Response[gen.FlexReply], error) {
	return c.normalRPC.CallUnary(ctx, req)
}

// ClientStream calls flex.FlexService.ClientStream.
func (c *flexServiceClient) ClientStream(ctx context.Context) *connect.ClientStreamForClient[gen.FlexRequest, gen.FlexReply] {
	return c.clientStream.CallClientStream(ctx)
}

// ServerStream calls flex.FlexService.ServerStream.
func (c *flexServiceClient) ServerStream(ctx context.Context, req *connect.Request[gen.FlexRequest]) (*connect.ServerStreamForClient[gen.FlexReply], error) {
	return c.serverStream.CallServerStream(ctx, req)
}

// BiDirectorionalStream calls flex.FlexService.BiDirectorionalStream.
func (c *flexServiceClient) BiDirectorionalStream(ctx context.Context, req *connect.Request[gen.FlexRequest]) (*connect.ServerStreamForClient[gen.FlexReply], error) {
	return c.biDirectorionalStream.CallServerStream(ctx, req)
}

// EmptyRPC calls flex.FlexService.EmptyRPC.
func (c *flexServiceClient) EmptyRPC(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.emptyRPC.CallUnary(ctx, req)
}

// FlexServiceHandler is an implementation of the flex.FlexService service.
type FlexServiceHandler interface {
	// Normal RPC method
	NormalRPC(context.Context, *connect.Request[gen.FlexRequest]) (*connect.Response[gen.FlexReply], error)
	// Stream from client to server
	ClientStream(context.Context, *connect.ClientStream[gen.FlexRequest]) (*connect.Response[gen.FlexReply], error)
	// Stream from server to client
	ServerStream(context.Context, *connect.Request[gen.FlexRequest], *connect.ServerStream[gen.FlexReply]) error
	// Stream both ways
	BiDirectorionalStream(context.Context, *connect.Request[gen.FlexRequest], *connect.ServerStream[gen.FlexReply]) error
	// Don't send or receive anything
	EmptyRPC(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewFlexServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFlexServiceHandler(svc FlexServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	flexServiceNormalRPCHandler := connect.NewUnaryHandler(
		FlexServiceNormalRPCProcedure,
		svc.NormalRPC,
		connect.WithSchema(flexServiceNormalRPCMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	flexServiceClientStreamHandler := connect.NewClientStreamHandler(
		FlexServiceClientStreamProcedure,
		svc.ClientStream,
		connect.WithSchema(flexServiceClientStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	flexServiceServerStreamHandler := connect.NewServerStreamHandler(
		FlexServiceServerStreamProcedure,
		svc.ServerStream,
		connect.WithSchema(flexServiceServerStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	flexServiceBiDirectorionalStreamHandler := connect.NewServerStreamHandler(
		FlexServiceBiDirectorionalStreamProcedure,
		svc.BiDirectorionalStream,
		connect.WithSchema(flexServiceBiDirectorionalStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	flexServiceEmptyRPCHandler := connect.NewUnaryHandler(
		FlexServiceEmptyRPCProcedure,
		svc.EmptyRPC,
		connect.WithSchema(flexServiceEmptyRPCMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flex.FlexService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FlexServiceNormalRPCProcedure:
			flexServiceNormalRPCHandler.ServeHTTP(w, r)
		case FlexServiceClientStreamProcedure:
			flexServiceClientStreamHandler.ServeHTTP(w, r)
		case FlexServiceServerStreamProcedure:
			flexServiceServerStreamHandler.ServeHTTP(w, r)
		case FlexServiceBiDirectorionalStreamProcedure:
			flexServiceBiDirectorionalStreamHandler.ServeHTTP(w, r)
		case FlexServiceEmptyRPCProcedure:
			flexServiceEmptyRPCHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFlexServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFlexServiceHandler struct{}

func (UnimplementedFlexServiceHandler) NormalRPC(context.Context, *connect.Request[gen.FlexRequest]) (*connect.Response[gen.FlexReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flex.FlexService.NormalRPC is not implemented"))
}

func (UnimplementedFlexServiceHandler) ClientStream(context.Context, *connect.ClientStream[gen.FlexRequest]) (*connect.Response[gen.FlexReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flex.FlexService.ClientStream is not implemented"))
}

func (UnimplementedFlexServiceHandler) ServerStream(context.Context, *connect.Request[gen.FlexRequest], *connect.ServerStream[gen.FlexReply]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flex.FlexService.ServerStream is not implemented"))
}

func (UnimplementedFlexServiceHandler) BiDirectorionalStream(context.Context, *connect.Request[gen.FlexRequest], *connect.ServerStream[gen.FlexReply]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flex.FlexService.BiDirectorionalStream is not implemented"))
}

func (UnimplementedFlexServiceHandler) EmptyRPC(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flex.FlexService.EmptyRPC is not implemented"))
}
